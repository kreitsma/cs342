2.
a.
KVLite is a Key-Value database.
b.
I would probably recommend a Document Store database, as IMDB has a great deal of many-to-many relationships that require a great deal of intermediary tables.
A document store would allow you to see and update values in a single document without having to worry about updating intermediary tables.
c.
In my code, you could not easily do it. Because the major key for the 'roles' table is based on the movieId, not the actorId, you can get actors in a movie, but
not the other way around. You would essentially have to change the major key for roles, then you could implement something similar to GetMovieActors.
d.
What this means in this case is that the way we created the key-value pairs was completely up to us; KVlite didn't force us to create any particular kind of schema.
For instance, as I mentioned in the previous question, I made the major key for roles the movieId, but it could easily have been the actorId instead--it all depends
on how your application will use the data, and whoever designs the key-value pairs can create them as they see fit, not according to a predetermined schema with rules
enforced on it by a DBMS.